Program 1:

package JavaAssignment7;

@FunctionalInterface
interface Addition
{
	int add(int a,int b);
}
interface Subtract
{
	int sub(int a,int b);
}
interface Multiply
{
	int mul(int a,int b);
}
interface Divide
{
	int div(int a,int b);
}
public class ArithmeticOperations 
{
	public static void main(String[] args)
	{
		System.out.println("Addition:");
		Addition Add=(a,b)->(a+b);
		System.out.println(Add.add(100,50));
		System.out.println("-----------------");
		System.out.println("Subtraction:");
		Subtract Sub=(a,b)->(a-b);
		System.out.println(Sub.sub(100,50));
		System.out.println("-----------------");
		System.out.println("Multiplication:");
		Multiply Mul=(a,b)->(a*b);
		System.out.println(Mul.mul(100, 50));
		System.out.println("-----------------");
		System.out.println("Division:");
		Divide Div=(a,b)->(a/b);
		System.out.println(Div.div(100,50));
	}
	
}


Program 2:

package JavaAssignment7;

interface Order
{
	void result(int price,String status);
}
public class PrintOrder
{
	public static void main(String[] args)
	{
		Order MyOrder=(price,status)->{
			if(price>10000) {
				if(status=="ACCEPTED" || status=="COMPLETED")
				{
					System.out.println("----------------");
					System.out.println("Order Printed");
					System.out.println("----------------");
				}
			}
			else
			{
				System.out.println("----------------");
				System.out.println("Order is not printed");
				System.out.println("----------------");
			}
		};
		MyOrder.result(5000, "COMPLETED");
		MyOrder.result(5000000, "COMPLETED");
		MyOrder.result(50, "ACCEPTED");
		MyOrder.result(150000, "ACCEPTED");

	}

}


Program 3:

package JavaAssignment7;

import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
public class BuiltInMethods 
{
		public static void main(String[] args) {
			
			Supplier<Double> randomValue = ()->Math.random();
			Predicate<Integer> greaterThan = i->(i>50);
			Consumer<Integer> display = (i)->System.out.println(i);
			Function<Integer,Double> half =(a)->a/2.0;
			
			System.out.println("-------------------------------------");
			System.out.println("Using Supplier Functional Interface");
			System.out.println(randomValue.get());
			System.out.println("-------------------------------------");
			System.out.println(" ");
			System.out.println("-------------------------------------");
			System.out.println("Using Predicate Functional Interface");
			System.out.println(greaterThan.test(90));
			System.out.println("-------------------------------------");
			System.out.println(" ");
			System.out.println("-------------------------------------");
			System.out.println("Using Consumer Functional Interface");
			display.accept(100);
			System.out.println("-------------------------------------");
			System.out.println(" ");
			System.out.println("-------------------------------------");
			System.out.println("Using Function Functional Interface");
			System.out.println(half.apply(250));
			System.out.println("-------------------------------------");
		}
	}


Program 4:

package JavaAssignment7;

import java.util.ArrayList;
import java.util.List;

public class RemoveOddLength 
{
	public static void main(String[] args) 
	{
		List<String> li=new ArrayList<>();
		li.add("Shuaib");
		li.add("Prince");
		li.add("Rohan");
		li.add("Arjun");
		
		System.out.println("-------------------------------");
		System.out.println("Elements in the list are:");
		
		for (String string : li) {
			System.out.println(string);
		}
		System.out.println("-------------------------------");
		System.out.println(" ");
		
		li.removeIf(a->(a.length()%2 !=0));
		System.out.println("------------------------------------------");
		System.out.println("Elements in the list with odd lengths are:");
		
		for (String string : li) {
			System.out.println(string);
		}
		System.out.println("------------------------------------------");
	}
}


Program 5:


package JavaAssignment7;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;

public class StringPgm 
{
	public static void main(String[] args) 
	{
		StringBuilder sb=new StringBuilder();
		Consumer<String> letter=(s)->
		{
			sb.append(s.charAt(0)); 
		};
		List<String> li=new ArrayList<>();
		li.add("Shuaib");
		li.add("Prince");
		li.add("Rohan");
		li.add("Arjun");
		for (Iterator iterator = li.iterator(); iterator.hasNext();) 
		{
			String string = (String) iterator.next();
			letter.accept(string);
			
		}
        System.out.println("-----");
		System.out.println(sb);
		System.out.println("-----");
	}
}


Program 6:

package JavaAssignment7;

import java.util.ArrayList;
import java.util.List;
import java.util.function.UnaryOperator;

class MyOperator implements UnaryOperator<String>
{
	@Override
	public String apply(String t) 
	{
		return t.toUpperCase();
	}
}
public class UpperCaseEquivalent 
{	
	public static void main(String[] args)
	{
		List<String> li=new ArrayList<>();
		li.add("Shuaib");
		li.add("Aayushi");
		li.add("Prince");
		li.add("Rohan");
		System.out.println("----------------------------------------------------------------");
		System.out.println("Elements in list are:");
		System.out.println(li);
		System.out.println("----------------------------------------------------------------");
		System.out.println(" ");
		li.replaceAll(new MyOperator());
		System.out.println("----------------------------------------------------------------");
		System.out.println("Elements in list after replacing with upper case letters are:");
		System.out.println(li);
		System.out.println("----------------------------------------------------------------");		
	}

}


Program 7:

package JavaAssignment7;

import java.util.HashMap;
import java.util.Map.Entry;

public class KeyValue
{

	public static void main(String[] args)
	{
		HashMap<Integer,String> hs=new HashMap<>();
		StringBuilder sb=new StringBuilder();
		hs.put(1, "ProjectManager");
		hs.put(2, "TeamLead");
		hs.put(3, "SeniorDeveloper");
		hs.put(4, "JuniorDeveloper");
		
		System.out.println("-----------------------------------------------------------------");
		System.out.println("The elements in the hashmap are:");
		System.out.println(hs);
		System.out.println("-----------------------------------------------------------------");
		System.out.println(" ");
		System.out.println("-----------------------------------------------------------------");
		System.out.println("After converting entire hashmap into a string, the result is:");
		for (Entry<Integer, String> m:hs.entrySet()) 
		{
			sb.append(m);
		}
		System.out.println(sb);
		System.out.println("-----------------------------------------------------------------");
	}

}



Program 8:

package JavaAssignment7;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;

public class ThreadPgm
{
	public static void main(String[] args)
	{
		Consumer<Integer> display = (i)->System.out.println(i);
		List<Integer> li = new ArrayList<>();
		li.add(1);
		li.add(2);
		li.add(3);
		li.add(4);
		li.add(5);
		
		for (Iterator iterator = li.iterator(); iterator.hasNext();) {
			Integer integer = (Integer) iterator.next();
			display.accept(integer);
		}
		Thread lambdaThread=new Thread();
		lambdaThread.run();	
	}
}


